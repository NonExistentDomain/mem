# Load the Windows Forms assembly
Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.Application]::EnableVisualStyles()

# Declare a script-scoped variable for the workstation name
$script:workstation = ""

# Create the main form
$form = New-Object System.Windows.Forms.Form
$form.Text = "MECM Deployments Viewer"
$form.Size = New-Object System.Drawing.Size(800, 600)
$form.StartPosition = "CenterScreen"

# Label for workstation name
$label = New-Object System.Windows.Forms.Label
$label.Text = "Workstation Name:"
$label.Location = New-Object System.Drawing.Point(10, 10)
$label.Size = New-Object System.Drawing.Size(100, 20)
$form.Controls.Add($label)

# Text box for entering workstation name
$textBox = New-Object System.Windows.Forms.TextBox
$textBox.Location = New-Object System.Drawing.Point(120, 10)
$textBox.Size = New-Object System.Drawing.Size(200, 20)
$form.Controls.Add($textBox)

# Connect button
$connectButton = New-Object System.Windows.Forms.Button
$connectButton.Text = "Connect"
$connectButton.Location = New-Object System.Drawing.Point(330, 10)
$connectButton.Size = New-Object System.Drawing.Size(100, 30)
$form.Controls.Add($connectButton)

# List view to display applications
$listView = New-Object System.Windows.Forms.ListView
$listView.Location = New-Object System.Drawing.Point(10, 50)
$listView.Size = New-Object System.Drawing.Size(760, 400)
$listView.View = [System.Windows.Forms.View]::Details
$listView.FullRowSelect = $true
$listView.Columns.Add("Application Name", 200)
$listView.Columns.Add("Publisher", 150)
$listView.Columns.Add("Version", 100)
$listView.Columns.Add("Can Install", 80)
$listView.Columns.Add("Can Uninstall", 80)
$form.Controls.Add($listView)

# Install button
$installButton = New-Object System.Windows.Forms.Button
$installButton.Text = "Install"
$installButton.Location = New-Object System.Drawing.Point(10, 460)
$installButton.Size = New-Object System.Drawing.Size(100, 30)
$installButton.Enabled = $false
$form.Controls.Add($installButton)

# Uninstall button
$uninstallButton = New-Object System.Windows.Forms.Button
$uninstallButton.Text = "Uninstall"
$uninstallButton.Location = New-Object System.Drawing.Point(120, 460)
$uninstallButton.Size = New-Object System.Drawing.Size(100, 30)
$uninstallButton.Enabled = $false
$form.Controls.Add($uninstallButton)

# Event handler for Connect button
$connectButton.Add_Click({
    $script:workstation = $textBox.Text
    if (-not $script:workstation) {
        [System.Windows.Forms.MessageBox]::Show("Please enter a workstation name.", "Error")
        return
    }
    try {
        # Query the MECM client on the workstation for available applications
        $applications = Get-WmiObject -Namespace root\ccm\ClientSDK -Class CCM_Application -ComputerName $script:workstation
        $listView.Items.Clear()
        foreach ($app in $applications) {
            $item = New-Object System.Windows.Forms.ListViewItem($app.FullName)
            $item.SubItems.Add($app.Publisher)
            $item.SubItems.Add($app.Version)
            $canInstall = if ($app.AllowedActions -contains "Install") { "Yes" } else { "No" }
            $canUninstall = if ($app.AllowedActions -contains "Uninstall") { "Yes" } else { "No" }
            $item.SubItems.Add($canInstall)
            $item.SubItems.Add($canUninstall)
            $item.Tag = $app.__PATH
            $listView.Items.Add($item)
        }
    } catch {
        [System.Windows.Forms.MessageBox]::Show("Failed to connect to $script:workstation : $_", "Error")
    }
})

# Event handler for list view selection change
$listView.Add_SelectedIndexChanged({
    if ($listView.SelectedItems.Count -eq 1) {
        $selectedItem = $listView.SelectedItems[0]
        $canInstall = $selectedItem.SubItems[3].Text -eq "Yes"
        $canUninstall = $selectedItem.SubItems[4].Text -eq "Yes"
        $installButton.Enabled = $canInstall
        $uninstallButton.Enabled = $canUninstall
    } else {
        $installButton.Enabled = $false
        $uninstallButton.Enabled = $false
    }
})

# Event handler for Install button
$installButton.Add_Click({
    if ($listView.SelectedItems.Count -eq 1) {
        $selectedItem = $listView.SelectedItems[0]
        $path = $selectedItem.Tag
        try {
            # Trigger the Install method on the selected application
            Invoke-WmiMethod -Path $path -Name Install -ArgumentList @()
            [System.Windows.Forms.MessageBox]::Show("Install command sent successfully.", "Success")
        } catch {
            [System.Windows.Forms.MessageBox]::Show("Failed to install: $_", "Error")
        }
    }
})

# Event handler for Uninstall button
$uninstallButton.Add_Click({
    if ($listView.SelectedItems.Count -eq 1) {
        $selectedItem = $listView.SelectedItems[0]
        $path = $selectedItem.Tag
        try {
            # Trigger the Uninstall method on the selected application
            Invoke-WmiMethod -Path $path -Name Uninstall -ArgumentList @()
            [System.Windows.Forms.MessageBox]::Show("Uninstall command sent successfully.", "Success")
        } catch {
            [System.Windows.Forms.MessageBox]::Show("Failed to uninstall: $_", "Error")
        }
    }
})

# Display the form
$form.ShowDialog()
