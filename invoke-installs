#Requires -RunAsAdministrator

# Import the Configuration Manager module remotely
$SiteServer = "YOUR_SCCM_SERVER"  # Replace with your SCCM server FQDN
$SiteCode = "YOUR_SITECODE"      # Replace with your site code

try {
    # If running locally on the site server, use local path; otherwise, use PS session
    if ($env:COMPUTERNAME -eq $SiteServer.Split('.')[0]) {
        Import-Module "$($ENV:SMS_ADMIN_UI_PATH)\..\ConfigurationManager.psd1" -ErrorAction Stop
    } else {
        $session = New-PSSession -ComputerName $SiteServer -ErrorAction Stop
        Import-Module -Name ConfigurationManager -PSSession $session -ErrorAction Stop
    }
    Write-Host "Configuration Manager module imported successfully" -ForegroundColor Green
} catch {
    Write-Host "Error importing Configuration Manager module: $_" -ForegroundColor Red
    exit
}

# Connect to the site
try {
    Set-Location "$($SiteCode):" -ErrorAction Stop
    Write-Host "Connected to site $SiteCode" -ForegroundColor Green
} catch {
    Write-Host "Error connecting to site: $_" -ForegroundColor Red
    exit
}

# Function to display menu
function Show-Menu {
    Clear-Host
    Write-Host "=== Remote MECM Client Management Script ===" -ForegroundColor Cyan
    Write-Host "1. List Available Applications for Device"
    Write-Host "2. List Available Software Updates for Device"
    Write-Host "3. Install Item on Device"
    Write-Host "4. Uninstall Application on Device"
    Write-Host "5. Exit"
}

# Function to get device-specific available items
function Get-DeviceAvailableItems {
    param (
        [string]$DeviceName,
        [string]$ItemType
    )
    
    # Get device resource ID
    $resource = Get-CMDevice -Name $DeviceName
    if (-not $resource) {
        Write-Host "Device $DeviceName not found" -ForegroundColor Red
        return $null
    }
    $resourceID = $resource.ResourceID

    switch ($ItemType) {
        "Applications" {
            # Query available applications for the device
            $apps = Get-WmiObject -Namespace "root\CCM\ClientSDK" -Class CCM_Application `
                -ComputerName $DeviceName | Where-Object { $_.InstallState -eq "NotInstalled" -or $_.InstallState -eq "Installed" }
            return $apps | Select-Object Name, Id, Revision, InstallState
        }
        "SoftwareUpdates" {
            # Query available software updates for the device
            $updates = Get-WmiObject -Namespace "root\CCM\ClientSDK" -Class CCM_SoftwareUpdate `
                -ComputerName $DeviceName | Where-Object { $_.ComplianceState -eq 0 }  # 0 = Not compliant (needs update)
            return $updates | Select-Object Name, ArticleID, ComplianceState, EvaluationState
        }
    }
}

# Function to install item on remote device
function Install-Item {
    param (
        [string]$DeviceName,
        [string]$ItemType,
        [string]$ItemID,
        [string]$Revision = "1"  # Default revision, adjust if needed
    )
    
    try {
        switch ($ItemType) {
            "Application" {
                $app = Get-WmiObject -Namespace "root\CCM\ClientSDK" -Class CCM_Application `
                    -ComputerName $DeviceName | Where-Object { $_.Id -eq $ItemID }
                if ($app) {
                    $null = ([wmiclass]"\\$DeviceName\root\CCM\ClientSDK:CCM_Application").Install($ItemID, $Revision, $true, 0, "Normal", $false)
                    Write-Host "Installation of $ItemType '$($app.Name)' triggered on $DeviceName" -ForegroundColor Green
                }
            }
            "SoftwareUpdate" {
                $update = Get-WmiObject -Namespace "root\CCM\ClientSDK" -Class CCM_SoftwareUpdate `
                    -ComputerName $DeviceName | Where-Object { $_.ArticleID -eq $ItemID }
                if ($update) {
                    $null = ([wmiclass]"\\$DeviceName\root\CCM\ClientSDK:CCM_SoftwareUpdatesManager").InstallUpdates(@($update))
                    Write-Host "Installation of update '$($update.Name)' triggered on $DeviceName" -ForegroundColor Green
                }
            }
        }
    } catch {
        Write-Host "Error installing $ItemType on $DeviceName : $_" -ForegroundColor Red
    }
}

# Function to uninstall application on remote device
function Uninstall-Item {
    param (
        [string]$DeviceName,
        [string]$ItemID,
        [string]$Revision = "1"  # Default revision
    )
    
    try {
        $app = Get-WmiObject -Namespace "root\CCM\ClientSDK" -Class CCM_Application `
            -ComputerName $DeviceName | Where-Object { $_.Id -eq $ItemID }
        if ($app -and $app.InstallState -eq "Installed") {
            $null = ([wmiclass]"\\$DeviceName\root\CCM\ClientSDK:CCM_Application").Uninstall($ItemID, $Revision, 0, "Normal", $false)
            Write-Host "Uninstallation of '$($app.Name)' triggered on $DeviceName" -ForegroundColor Green
        } else {
            Write-Host "Application not installed or not found" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "Error uninstalling application on $DeviceName : $_" -ForegroundColor Red
    }
}

# Main script loop
do {
    Show-Menu
    $choice = Read-Host "Enter your choice (1-5)"
    
    switch ($choice) {
        "1" {
            $device = Read-Host "Enter target device name (e.g., DeviceA)"
            $items = Get-DeviceAvailableItems -DeviceName $device -ItemType "Applications"
            if ($items) { $items | Format-Table -AutoSize }
            Pause
        }
        "2" {
            $device = Read-Host "Enter target device name (e.g., DeviceA)"
            $items = Get-DeviceAvailableItems -DeviceName $device -ItemType "SoftwareUpdates"
            if ($items) { $items | Format-Table -AutoSize }
            Pause
        }
        "3" {
            $device = Read-Host "Enter target device name (e.g., DeviceA)"
            $itemType = Read-Host "Enter item type (Application/SoftwareUpdate)"
            $itemID = Read-Host "Enter item ID (e.g., Application ID or ArticleID)"
            Install-Item -DeviceName $device -ItemType $itemType -ItemID $itemID
            Pause
        }
        "4" {
            $device = Read-Host "Enter target device name (e.g., DeviceA)"
            $itemID = Read-Host "Enter Application ID to uninstall"
            Uninstall-Item -DeviceName $device -ItemID $itemID
            Pause
        }
        "5" {
            Write-Host "Exiting..." -ForegroundColor Yellow
            break
        }
        default {
            Write-Host "Invalid choice" -ForegroundColor Red
            Pause
        }
    }
} while ($choice -ne "5")

# Clean up
if ($session) { Remove-PSSession $session }
Set-Location $PSScriptRoot